import flet as ft
from flet import *

class Task(ft.UserControl):
    def __init__(self, input_text, remove_task):
        super().__init__()
        self.input = input_text
        self.remove_task = remove_task

    def build(self):
        self.task_cb = ft.Checkbox(label=self.input)
        self.edit_tf = ft.TextField(value=self.input)
        self.task_view = ft.Draggable(group="list",
                                      content=ft.Row(visible=True,controls=[self.task_cb, ft.IconButton(icon=ft.icons.CREATE_OUTLINED, on_click=self.edit_clicked),
                                          ft.IconButton(icon=ft.icons.DELETE_OUTLINE,on_click=self.remove_clicked)
                                          ]
    )
)
        self.edit_view = ft.Row(visible=False,
                                controls=[self.edit_tf,
                                          ft.IconButton(icon=ft.icons.CHECK, on_click=self.save_clicked)
                                          ]
)
        return ft.Column(controls=[self.task_view,self.edit_view])
    
    def edit_clicked(self,e):
        self.task_view.visible = False
        self.edit_view.visible = True
        self.update()

    def remove_clicked(self,e):
        self.remove_task(self)

    def save_clicked(self,e):
        self.task_cb.label = self.edit_tf.value
        self.task_view.visible = True
        self.edit_view.visible = False
        self.update()

class Todo(ft.UserControl):
    def build(self):
        self.input = ft.TextField(label="Your task",hint_text="what should be done",border=ft.border.all(2, ft.colors.BLACK))
        self.task = ft.Column()

        view = ft.Column(
                         controls=[ft.Text(value="To Do",style=ft.TextThemeStyle.HEADLINE_LARGE,width="bold"),
                        ft.Row(controls=[self.input,ft.FloatingActionButton(icon=ft.icons.ADD_TASK_ROUNDED,
                                                                            bgcolor=ft.colors.DEEP_ORANGE_300,
                                                                            on_click=self.add_clicked)
                                                                            ]
                                                                        ),
                                                                        self.task
                                                                    ],
                                                                )
        return view

    def add_clicked(self, e):
        if self.input.value != '':
            task = Task(self.input.value, self.remove_task)
            self.input.value = ''
            self.task.controls.append(task)
            self.update()
        else:
            pass
    
    def remove_task(self,task):
        self.task.controls.remove(task)
        self.update()


def main(page: ft.Page):

    def drag_will_accept(e):
        e.control.content.border = border.all(
            2, colors.BLACK45 
        )
        e.control.update()
        page.update()

    def drag_accept(e: DragTargetAcceptEvent):
        src = page.get_control(e.src_id)
        e.control.content = src.content
        e.control.content.border = None
        e.control.update()
        page.update()

    def drag_leave(e):
        e.control.content.border = None
        e.control.update()
        page.update()

    page.title = "Individual Task"
    page.vertical_alignment = ft.MainAxisAlignment.CENTER
    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER

    todo = Todo()
    
    page.add(
        ft.Text(
            spans=[
                ft.TextSpan(
                    "Kanban Board",
                    ft.TextStyle(
                        size=60,
                        weight=ft.FontWeight.BOLD,
                        foreground=ft.Paint(
                            gradient=ft.PaintLinearGradient(
                                (20, 45), (20, 80), [ft.colors.RED, ft.colors.YELLOW]
                            )
                        ),
                    ),
                ),
            ],
        ),
    ft.Divider(
    height=20,
    color=ft.colors.BLACK,
    ),
    ft.Row(
            [
                todo,
                ft.DragTarget(group="list",
                              content=ft.Container(
                    ft.Text("Doing",size=30,weight="Bold"),
                    margin=10,
                    padding=10,
                    alignment=ft.alignment.top_left,
                    bgcolor=ft.colors.RED_ACCENT_200,
                    height=500,
                    width=400,
                    border_radius=20,
                    border=ft.border.all(3, ft.colors.BLACK),
                    expand=True,
                ),on_will_accept=drag_will_accept,
                    on_accept=drag_accept,
                    on_leave=drag_leave,
),
                ft.DragTarget(group="list",
                              content=ft.Container(
                    ft.Text("Done",size=30,weight="Bold"),
                    margin=10,
                    padding=10,
                    alignment=ft.alignment.top_left,
                    bgcolor=ft.colors.YELLOW_ACCENT_200,
                    height=500,
                    width=400,
                    border_radius=20,
                    border=ft.border.all(3, ft.colors.BLACK),
                    expand=True,
                ),  on_will_accept=drag_will_accept,
                    on_accept=drag_accept,
                    on_leave=drag_leave,
)
            ],
            alignment=ft.MainAxisAlignment.CENTER,
        ),
    )

ft.app(target=main)
#ft.app(main, view=ft.AppView.WEB_BROWSER)#